{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Aula 10 - Parte 2 - Construindo uma Rede Convolucional e Utilizando a Base CIFAR10","private_outputs":true,"provenance":[],"authorship_tag":"ABX9TyOrlh5wNJg4RppivZ7sP04i"},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"cell_type":"markdown","metadata":{"id":"uqXlwzpmAPbr"},"source":["# Bibliotecas"]},{"cell_type":"code","metadata":{"id":"XLm24LHt_z49"},"source":["import tensorflow as tf\n","import matplotlib.pyplot as plt\n","from tensorflow.keras.datasets import cifar10\n","import numpy as np"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"EryQPWJHAiVa"},"source":["tf.__version__"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"15Lld8khAuxv"},"source":["# Carregando a Base de Imagens"]},{"cell_type":"code","metadata":{"id":"vtrX1a8fAt6x"},"source":["# A função load_data já retorna os conjuntos de treino e teste\n","(X_train, y_train), (X_test, y_test) = cifar10.load_data() "],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"MIHUfsouAkUU"},"source":["np.unique(y_train)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"XIAgaAtbBFx0"},"source":["#Como os rótulos são numérios, vamos criar os rótulos textuais para cada categoria\n","class_names = ['Airplane', 'Automobile', 'Bird', 'Cat', 'Deer', 'Dog', 'Frog', 'Horse', 'Ship', 'Truck']"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"dodcQWXnBwc7"},"source":["y_train.shape"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"RD5YJostBdOM"},"source":["X_train.shape"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"uZE8Mhm6BhZP"},"source":["plt.imshow(X_train[0])"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"yZjlfYwsBkVM"},"source":["class_names[y_train[0][0]]"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"TPaCl32VB9pk"},"source":["#Padronizando os valores das imagens [0-1] por questões de convergência da rede"]},{"cell_type":"code","metadata":{"id":"BlZnuXJDBrWb"},"source":["X_train = X_train / 255.0\n","X_test = X_test / 255.0"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"jGoPFCd7CJks"},"source":["X_train"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"R8qOdS9WCRIB"},"source":["#Criando a Rede Neural Convolucional"]},{"cell_type":"markdown","metadata":{"id":"FEXjq6LbCt3J"},"source":["## Criando o Modelo Sequencial"]},{"cell_type":"code","metadata":{"id":"QjsgzW_0CKpT"},"source":["\"\"\"Criaremos um obeto da Classe Sequential\n","   o qual nos permitirá adicional camadas na\n","   rede sequencialmente \"\"\"\n","model = tf.keras.Sequential()"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Pqp3EO0DDFR6"},"source":["## Adicionando as Camadas de Convolução e Pooling"]},{"cell_type":"code","metadata":{"id":"D_sN1x_GCzNO"},"source":["# Número de filtro (filters) = 35\n","# Tamanho da matriz kernel (kernel_size) = 5 PS: pode receber uma tupla também\n","# Tipo do padding = same\n","# Função de ativação: 'relu'\n","# Shape dos dados de entrada = [32,32,3] (dimensões de uma imagem da base CIFAR10)\n","model.add(tf.keras.layers.Conv2D(filters=32, kernel_size=5, padding='same', activation='relu', input_shape=[32,32,3]))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"DrgVKzp_DXsq"},"source":["#Utilizando o Max Pooling (MaxPool2D)\n","#Tamanho da janela do pooling (pool_size) = (5,5)\n","#Tamanho do deslocamento da janela (strides) = 5\n","#Tipo do padding = 'valid'\n","model.add(tf.keras.layers.MaxPool2D(pool_size=(5,5), strides=5, padding='valid'))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"wXKF5InHDa6x"},"source":["model.add(tf.keras.layers.Conv2D(filters=32, kernel_size=3, padding='same', activation='relu'))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"vKkWQBPjDd0p"},"source":["model.add(tf.keras.layers.MaxPool2D(pool_size=(3,3), strides=3, padding='valid'))"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Pu0XlUgXEkYV"},"source":["## Adicionando a Camada de Flattening"]},{"cell_type":"code","metadata":{"id":"CZQlNlLjEh2q"},"source":["model.add(tf.keras.layers.Flatten())"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"6AJqRHM2FIL6"},"source":["## Adicionando as Camadas Densas"]},{"cell_type":"code","metadata":{"id":"kzkaXJbdFHDD"},"source":["# Adicionando uma camada densa com 64 neurônios e função de ativação Relu\n","model.add(tf.keras.layers.Dense(units=64, activation='relu'))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"g1ew0qQoEqZK"},"source":["# Adicionando uma camada densa com 32 neurônios e função de ativação Relu\n","model.add(tf.keras.layers.Dense(units=64, activation='relu'))"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"RHkRqK2_FmtX"},"source":["##Adicionando a Camada de Saída"]},{"cell_type":"code","metadata":{"id":"b1nYu-XDFgwB"},"source":["model.add(tf.keras.layers.Dense(units=10, activation='softmax'))"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"KxMmjr40F1T0"},"source":["## Sumário do Modelo"]},{"cell_type":"code","metadata":{"id":"N6izz0hfFu3U"},"source":["model.summary()"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"waZGTcRbGCVq"},"source":["#Definindo os Parêmetros e Compilando o Modelo"]},{"cell_type":"code","metadata":{"id":"Wut6M0JRF3Tz"},"source":["model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"lV0QIAWMHvb2"},"source":["# Treinando o Modelo"]},{"cell_type":"code","metadata":{"id":"_hGZzdx0HKBh"},"source":["#Definido o número máximo de épocas = 5\n","model.fit(X_train, y_train, epochs=20)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"YjHNENIZJuM4"},"source":["# Avaliando o Modelo"]},{"cell_type":"code","metadata":{"id":"Ti0FRQpxH3KQ"},"source":["\"\"\"Podemos utilizar as métricas do Scikit-Learning como anteriormente ou utilizar\n","   uma função de avaliação presente no próprio modelo\"\"\"\n","test_loss, test_accuracy = model.evaluate(X_test, y_test)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"GQEdDm_0JmSS"},"source":["test_loss"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"6N3CNOm4JoqK"},"source":["test_accuracy"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"kB_PCiYBKG2O"},"source":["#Classificando na prática"]},{"cell_type":"code","metadata":{"id":"GPnfJbhhJrYd"},"source":["#Pegando uma imagem do conjunto de teste\n","img = X_test[1]\n","plt.imshow(img)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"_Jt7Ssb7KOV9"},"source":["#O modelo espera como entrada para predicação uma coleção de imagens\n","#Portanto, os dados de entrada contém 4 dimenções (imagens, altura, largura, (RGB))\n","#Porém, a imagem individual possui 3 dimensões\n","img.shape"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"ZKPlA8CHKljz"},"source":["#Vamos fazer um reshape para adequá-la a entrada do modelo\n","img = img.reshape(1,32,32,3)\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"AUd19njjPiPS"},"source":["#Retornado a vetor de predições da imagem (probabilidade para cada classe)\n","model.predict(img)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"X92MfadGPnUL"},"source":["#Retornado a posição que possui o maior valor de predição\n","id_classe = np.argmax(model.predict(img))\n","id_classe"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Pikxq2HBPriD"},"source":["print(f'Predição: {class_names[id_classe]}')"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"HO6hQ74yQJJL"},"source":[""],"execution_count":null,"outputs":[]}]}